{
    "swagger": "2.0",
    "info": {
        "title": "Promotion Management",
        "description": "This is Swagger UI environment generated for the TMF Promotion Management specification",
        "version": "4.0.0"
    },
    "host": "serverRoot",
    "basePath": "/tmf-api/promotionManagement/v4/",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json;charset=utf-8"
    ],
    "produces": [
        "application/json;charset=utf-8"
    ],
    "tags": [
        {
            "name": "promotion"
        },
        {
            "name": "notification listeners (client side)"
        },
        {
            "name": "events subscription"
        }
    ],
    "paths": {
        "/promotion": {
            "get": {
                "operationId": "listPromotion",
                "summary": "List or find Promotion objects",
                "description": "This operation list or find Promotion entities",
                "tags": [
                    "promotion"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Promotion"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createPromotion",
                "summary": "Creates a Promotion",
                "description": "This operation creates a Promotion entity.",
                "tags": [
                    "promotion"
                ],
                "parameters": [
                    {
                        "name": "promotion",
                        "description": "The Promotion to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Promotion_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Promotion"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/promotion/{id}": {
            "get": {
                "operationId": "retrievePromotion",
                "summary": "Retrieves a Promotion by ID",
                "description": "This operation retrieves a Promotion entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "promotion"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Promotion",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Promotion"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchPromotion",
                "summary": "Updates partially a Promotion",
                "description": "This operation updates partially a Promotion entity.",
                "tags": [
                    "promotion"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Promotion",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "promotion",
                        "description": "The Promotion to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Promotion_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/Promotion"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deletePromotion",
                "summary": "Deletes a Promotion",
                "description": "This operation deletes a Promotion entity.",
                "tags": [
                    "promotion"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Promotion",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub": {
            "post": {
                "operationId": "registerListener",
                "summary": "Register a listener",
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        },
                        "required": true,
                        "in": "body",
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscribed",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener",
                "summary": "Unregister a listener",
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "description": "The id of the registered listener"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/promotionCreateEvent": {
            "post": {
                "operationId": "listenToPromotionCreateEvent",
                "summary": "Client listener for entity PromotionCreateEvent",
                "description": "Example of a client listener for receiving the notification PromotionCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PromotionCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/promotionDeleteEvent": {
            "post": {
                "operationId": "listenToPromotionDeleteEvent",
                "summary": "Client listener for entity PromotionDeleteEvent",
                "description": "Example of a client listener for receiving the notification PromotionDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PromotionDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/promotionAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToPromotionAttributeValueChangeEvent",
                "summary": "Client listener for entity PromotionAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification PromotionAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PromotionAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/promotionStateChangeEvent": {
            "post": {
                "operationId": "listenToPromotionStateChangeEvent",
                "summary": "Client listener for entity PromotionStateChangeEvent",
                "description": "Example of a client listener for receiving the notification PromotionStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PromotionStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/promotionInformationRequiredEvent": {
            "post": {
                "operationId": "listenToPromotionInformationRequiredEvent",
                "summary": "Client listener for entity PromotionInformationRequiredEvent",
                "description": "Example of a client listener for receiving the notification PromotionInformationRequiredEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PromotionInformationRequiredEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Addressable": {
            "type": "object",
            "description": "Base schema for adressable entities",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                }
            }
        },
        "EntityRef": {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "Extensible": {
            "type": "object",
            "description": "Base Extensible schema for use in TMForum Open-APIs",
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Promotion": {
            "type": "object",
            "description": "Promotion is used to provide the additional discount, voucher, bonus or gift to the customer who meets the pre-defined criteria. Using promotion, the enterprise is able to attract the users and encourage more consumption, especially continuous purchases. Normally Promotion is not regarded as one type of product or product offering. It is often applied when the customer buys the product offerings with the price or amount surpassing the certain limit.",
            "required": [
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of promotion."
                },
                "href": {
                    "type": "string",
                    "description": "Hyperlink to access the promotion."
                },
                "description": {
                    "type": "string",
                    "description": "Details about the purpose of this promotion."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Latest update date of promotion."
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Value of promotion status. Our suggestion would be: draft/test/waitForApproval/release/suspend/retirement."
                },
                "name": {
                    "type": "string",
                    "description": "Name of promotion."
                },
                "promotionType": {
                    "type": "string",
                    "description": "Type of promotion. The basic type are Award/Discount/Reduction."
                },
                "pattern": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PromotionPattern"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the promotion is valid."
                },
                "@baseType": {
                    "type": "string",
                    "description": "The base type for use in polymorphic collections."
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A link to the schema describing a resource (for type extension)."
                },
                "@type": {
                    "type": "string",
                    "description": "The class type of the actual resource (for type extension)."
                }
            }
        },
        "Promotion_Create": {
            "type": "object",
            "description": "Promotion is used to provide the additional discount, voucher, bonus or gift to the customer who meets the pre-defined criteria. Using promotion, the enterprise is able to attract the users and encourage more consumption, especially continuous purchases. Normally Promotion is not regarded as one type of product or product offering. It is often applied when the customer buys the product offerings with the price or amount surpassing the certain limit.\nSkipped properties: id,href",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Details about the purpose of this promotion."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Latest update date of promotion."
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Value of promotion status. Our suggestion would be: draft/test/waitForApproval/release/suspend/retirement."
                },
                "name": {
                    "type": "string",
                    "description": "Name of promotion."
                },
                "promotionType": {
                    "type": "string",
                    "description": "Type of promotion. The basic type are Award/Discount/Reduction."
                },
                "pattern": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PromotionPattern"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the promotion is valid."
                },
                "@baseType": {
                    "type": "string",
                    "description": "The base type for use in polymorphic collections."
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A link to the schema describing a resource (for type extension)."
                },
                "@type": {
                    "type": "string",
                    "description": "The class type of the actual resource (for type extension)."
                }
            }
        },
        "Promotion_Update": {
            "type": "object",
            "description": "Promotion is used to provide the additional discount, voucher, bonus or gift to the customer who meets the pre-defined criteria. Using promotion, the enterprise is able to attract the users and encourage more consumption, especially continuous purchases. Normally Promotion is not regarded as one type of product or product offering. It is often applied when the customer buys the product offerings with the price or amount surpassing the certain limit.\nSkipped properties: id,href,pattern",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Details about the purpose of this promotion."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Latest update date of promotion."
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Value of promotion status. Our suggestion would be: draft/test/waitForApproval/release/suspend/retirement."
                },
                "name": {
                    "type": "string",
                    "description": "Name of promotion."
                },
                "promotionType": {
                    "type": "string",
                    "description": "Type of promotion. The basic type are Award/Discount/Reduction."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the promotion is valid."
                },
                "@baseType": {
                    "type": "string",
                    "description": "The base type for use in polymorphic collections."
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A link to the schema describing a resource (for type extension)."
                },
                "@type": {
                    "type": "string",
                    "description": "The class type of the actual resource (for type extension)."
                }
            }
        },
        "PromotionAction": {
            "type": "object",
            "description": "Action of the promotion. When the customer meets the conditions in the promotion pattern, the customer can be given the benefits in the action.",
            "required": [
                "actionType"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier."
                },
                "actionType": {
                    "type": "string",
                    "description": "Action type can be one of the following: voice (minute), data (MB), data (GB), SMS, bonus point, physical gift, voucher, promotion code, an existing offering, currency."
                },
                "actionValue": {
                    "type": "string",
                    "description": "When the Promotion type is 1: Award, it means the amount or value of the awards decided by actionType, such as: Amount of gift, Amount of bonus, Value of discount;  \n \u2022 When the Promotion type is 2: Discount, it means the value of the discount;  \n \u2022 When the Promotion type is 3: reduction, it means the value of the reduced money."
                },
                "actionEntityRef": {
                    "$ref": "#/definitions/EntityRef",
                    "description": "It refers to the entity which is impacted by the promotion action. \n \u2022 When the Promotion type is 1: Award, the actionEntityRef is the party account; \n \u2022 When the Promotion type is 2: Discount, it is the product offering; \n \u2022 When the Promotion type is 3: Reduction, it is the product offering also."
                },
                "@baseType": {
                    "type": "string",
                    "description": "The base type for use in polymorphic collections"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A link to the schema describing a resource (for type extension)."
                },
                "@type": {
                    "type": "string",
                    "description": "The class type of the actual resource (for type extension)."
                }
            }
        },
        "PromotionCriteria": {
            "type": "object",
            "description": "Set of criteria to be followed by all parties.",
            "required": [
                "criteriaOperator",
                "criteriaParameter",
                "criteriaValue"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier."
                },
                "criteriaOperator": {
                    "type": "string",
                    "description": "Logic operator of this criteria instruction: '=' or '>' or '<' or '>=' or '<=' or '<>'."
                },
                "criteriaParameter": {
                    "type": "string",
                    "description": "The parameter (factor) of the criteria.The basic factors are abstracted from these data sources.There are several detail parameters."
                },
                "criteriaValue": {
                    "type": "string",
                    "description": "The value is filled for the comparison of the criteria."
                },
                "@baseType": {
                    "type": "string",
                    "description": "The base type for use in polymorphic collections"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A link to the schema describing a resource (for type extension)."
                },
                "@type": {
                    "type": "string",
                    "description": "The class type of the actual resource (for type extension)."
                }
            }
        },
        "PromotionCriteriaGroup": {
            "type": "object",
            "description": "Set of group criteria to promotion. Fulfilling these criteria, parties will receice benefits",
            "required": [
                "criteria"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique Identifier"
                },
                "criteriaLogicalRelationship": {
                    "type": "string",
                    "description": "Logical relation followed by all criteria."
                },
                "groupName": {
                    "type": "string",
                    "description": "Name of the group to be easily identified"
                },
                "criteria": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PromotionCriteria"
                    },
                    "minItems": 1
                },
                "@baseType": {
                    "type": "string",
                    "description": "The base type for use in polymorphic collections"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A link to the schema describing a resource (for type extension)."
                },
                "@type": {
                    "type": "string",
                    "description": "The class type of the actual resource (for type extension)."
                }
            }
        },
        "PromotionPattern": {
            "type": "object",
            "description": "Contains the conditions and benefits of the promotion toan eligible party",
            "required": [
                "action",
                "criteriaGroup"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of promotion pattern."
                },
                "criteriaGroupLogicalRelationship": {
                    "type": "string",
                    "description": "Logical relation followed by the criteria group."
                },
                "description": {
                    "type": "string",
                    "description": "Small description to clarify the pattern details."
                },
                "name": {
                    "type": "string",
                    "description": "Alias to promotion pattern. This way is easily mentioned."
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. Smaller number means high."
                },
                "action": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PromotionAction"
                    },
                    "minItems": 1
                },
                "criteriaGroup": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PromotionCriteriaGroup"
                    },
                    "minItems": 1
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period  for which the promotion pattern is valid."
                },
                "@baseType": {
                    "type": "string",
                    "description": "The base type for use in polymorphic collections"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A link to the schema describing a resource (for type extension)."
                },
                "@type": {
                    "type": "string",
                    "description": "The class type of the actual resource (for type extension)."
                }
            }
        },
        "TimePeriod": {
            "type": "object",
            "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
            "properties": {
                "endDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "End of the time period, using IETC-RFC-3339 format"
                },
                "startDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "Start of the time period, using IETC-RFC-3339 format"
                }
            }
        },
        "EventSubscription": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "id",
                "callback"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the listener"
                },
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "EventSubscriptionInput": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "callback"
            ],
            "properties": {
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "PromotionCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PromotionCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "PromotionCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "promotion": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Promotion"
                }
            }
        },
        "PromotionDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PromotionDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "PromotionDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "promotion": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Promotion"
                }
            }
        },
        "PromotionAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PromotionAttributeValueChangeEventPayload"
                }
            }
        },
        "PromotionAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "promotion": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Promotion"
                }
            }
        },
        "PromotionStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PromotionStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "PromotionStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "promotion": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Promotion"
                }
            }
        },
        "PromotionInformationRequiredEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PromotionInformationRequiredEventPayload"
                }
            }
        },
        "PromotionInformationRequiredEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "promotion": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Promotion"
                }
            }
        },
        "Error": {
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
            "type": "object",
            "required": [
                "code",
                "reason"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Application relevant detail, defined in the API or a common list."
                },
                "reason": {
                    "type": "string",
                    "description": "Explanation of the reason for the error which can be shown to a client user."
                },
                "message": {
                    "type": "string",
                    "description": "More details and corrective actions related to the error which can be shown to a client user."
                },
                "status": {
                    "type": "string",
                    "description": "HTTP Error code extension"
                },
                "referenceError": {
                    "type": "string",
                    "format": "uri",
                    "description": "URI of documentation describing the error."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class."
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name."
                }
            }
        }
    }
}
